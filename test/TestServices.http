#Arquivo para realizar testes no serviço OData

@baseUrl = http://localhost:4004/
@baseUrlComplete = http://localhost:4004/
@complementUrl = admin/

@completeUrl = http://localhost:4004/admin

#Importante: Quando os dados não estiverem persistidos no DB (litesql) reiniciar o serviço na porta 

###
#create GET request in bookshop service document
GET {{baseUrl}}{{complementUrl}}

###
#create GET request in bookshop service document using complete path
GET {{completeUrl}}

###
#create GET request in bookshop service document with complete baseURL
GET {{baseUrlComplete}}{{complementUrl}}

###
#create GET request in bookshop service document with complete baseURL JSon Format
GET {{baseUrlComplete}}{{complementUrl}}?$format=json

###
#create GET request in bookshop metadata
GET {{baseUrl}}{{complementUrl}}$metadata

###
#create GET request in bookshop metadata in json format
GET {{baseUrl}}{{complementUrl}}$metadata?$format=json

###
#create GET request in bookshop metadata with complete baseURL
GET {{baseUrlComplete}}{{complementUrl}}$metadata

###
#create GET request in book service (query)
GET {{baseUrl}}{{complementUrl}}Books

###
#create GET request in book service (read)
GET {{baseUrl}}admin/Books
# HTTP/1.1 200 OK
# HTTP/1.1 404 Not Found

###
#create GET request in book service (read) with key
GET {{baseUrl}}admin/Books(622fe295-f41a-4c72-a837-e50886d25725)
# HTTP/1.1 200 OK
# HTTP/1.1 404 Not Found

###
#create GET request in book service (read) with locale (text)
GET {{baseUrl}}admin/Books?sap-locale=en

###
#create GET request in books entity in booksShop service with
GET {{baseUrl}}{{complementUrl}}Books
 Accept-Language: de

###
#create GET request in Authors entity in booksShop service with
GET {{baseUrl}}{{complementUrl}}Authors
 
###
#create GET request in Epochs entity in booksShop service with
GET {{baseUrl}}{{complementUrl}}Epochs

###
#create GET request in Epochs entity in booksShop service with
GET {{baseUrl}}{{complementUrl}}Authors(001199da-6131-4c4a-9ef4-7b5c295af6c2)

### 
#create POST request in author service
POST {{baseUrl}}{{complementUrl}}Authors
Content-Type: application/json

{    
    "name" : "Teste4",
    "gender" : "M",
    "epoch_ID" : 110,
    "dateOfBirth" : "2024-01-01",
    "dateOfDeath" : "2022-01-01" 
}

#Optimist DB Lock thought concurrent transactions
###create PUT request to update author
PUT  {{baseUrl}}{{complementUrl}}Authors(001199da-6131-4c4a-9ef4-7b5c295af6c2)
If-Match: W/"2024-10-06T23:13:47.158Z"
Content-type: application/json 

{
    "name" : "Updated name again"
}


###
#Create a new author
# @name CreateNewAuthor
POST {{baseUrl}}{{complementUrl}}Authors  
Content-Type: application/json

{    
    "name" : "TesteUpdateWithEtags1",
    "gender" : "M",
    "epoch_ID" : 110,
    "dateOfBirth" : "2024-01-01",
    "dateOfDeath" : "2022-01-01" 
}

###
@authorID = {{CreateNewAuthor.response.body.$.ID}}

###
#create GET request in Authors entity in booksShop service with
GET {{baseUrl}}{{complementUrl}}Authors({{authorID}})

###
#Get Etag from autor
@Etag1 = {{CreateNewAuthor.response.headers.Etag}}


#Optimist DB Lock thought concurrent transactions
###create PUT request to update author
PUT  {{baseUrl}}{{complementUrl}}Authors({{authorID}})
If-Match: {{Etag1}}
Content-type: application/json 

{
    "name" : "Updated name again Teste7"
}

###
#create GET request in Authors entity in booksShop service with
GET {{baseUrl}}{{complementUrl}}Authors({{authorID}})

###
#Get Etag from autor
@Etag2 = {{CreateNewAuthor.response.headers.Etag}}


#Optimist DB Lock thought concurrent transactions
###create PUT request to update author
PUT  {{baseUrl}}{{complementUrl}}Authors({{authorID}})
If-Match: {{Etag2}}
Content-type: application/json 

{
    "name" : "Updated name again Etag2"
}

###
#create a GET request in the Epochs entity set
GET {{baseUrl}}{{complementUrl}}Epochs 

###
#create a GET request in the Currency entity set
GET {{baseUrl}}{{complementUrl}}Currencies

###
#create a GET request in the Currency entity set
GET {{baseUrl}}{{complementUrl}}Countries

###
#create POST request in book service
POST {{baseUrl}}admin/Books
Content-Type: application/json

{    
    "title": "Book #13",
    "price_amount" : 14.00,
    "price_currency_code" : "BRL",
    "genre" : 2,
    "authors_ID" : "987cf222-6793-4532-81f2-160fd295bfc4",
    "commonField" : "common2",
    "stock" : 9
}

###
#create POST request in book service
POST {{baseUrl}}admin/Books
Content-Type: application/json

{    
    "title": "Book #08",
    "price_amount": 8.00 ,
    "price_Currency_code": "BRL",    
    "genre" : 2,
    "commonField" : "common2"
}
#HTTP/1.1 201 Created
#HTTP/1.1 400 Bad Request Quando a chave já existe ou quando uma propriedade obrigatório não é enviado
# {
#   "error": {
#     "message": "Value is required",
#     "target": "title",
#     "code": "400",
#     "@Common.numericSeverity": 4
#   }
# }

###
#create POST request in book service
POST {{baseUrl}}{{complementUrl}}Books
Content-Type: application/json

{
    
}
#HTTP/1.1 201 Created
#HTTP/1.1 400 Bad Request


# ____________________________ CatalogService
###
# get Catalog Service document
GET {{baseUrl}}cat

###
# get Catalog Service metadata
GET {{baseUrl}}cat/$metadata

###
# get Books entity data
GET {{baseUrl}}cat/Books

###
# get Books entity data
GET {{baseUrl}}cat/Books(9c272f99-6e47-4e5b-a806-7077ebdc6c5b)

###
# get Books entity data
GET {{baseUrl}}cat/Authors

###
# create an author
POST {{baseUrl}}{{complementUrl}}Authors  
Content-Type: application/json

{    
    "name" : "TesteUpdateWithEtNewAuthor1",
    "gender" : "M",
    "epoch_ID" : 110,
    "dateOfBirth" : "2024-01-01",
    "dateOfDeath" : "2025-01-01" 
}

###
@authorID = {{CreateNewAuthor.response.body.$.ID}}


###
#create POST request in book service
POST {{baseUrl}}cat/Books
Content-Type: application/json

{    
    "title": "Book #1",
    "authors_ID" : "37ee3694-bfec-4a59-95f5-15af2816dc49",
    "stock" : 210
}


###
# create an author
POST {{baseUrl}}cat/Authors  
Content-Type: application/json

{    
    "name" : "TesteUpdateWithEtNewAuthor1",
    "gender" : "M",
    "epoch_ID" : 110,
    "dateOfBirth" : "2024-01-01",
    "dateOfDeath" : "2025-01-01" 
}

###
@authorID2 = {{CreateNewAuthor.response.body.$.ID}}

###
GET {{baseUrl}}cat/Authors(15f88097-439b-487c-bf90-535e27548e7f)


###
GET {{baseUrl}}cat/Books

###
# get Authors entity data
GET {{baseUrl}}cat/Authors({{authorID2}})

###
#create POST request in book service
POST {{baseUrl}}cat/Books
Content-Type: application/json

{    
    "title": "Book #1",
    //"price_amount": 1.00 ,
    //"price_Currency_code": "BRL",    
    //"genre" : 1,
    "authors_ID" : "15f88097-439b-487c-bf90-535e27548e7f"
    //"commonField" : "common2"
}

###
#create author to test function validateLifeDate
POST {{baseUrl}}{{complementUrl}}Author

