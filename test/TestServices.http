#Arquivo para realizar testes no serviço OData

@baseUrl = http://localhost:4004/
@baseUrlComplete = http://localhost:4004/
@complementUrl = admin/

@completeUrl = http://localhost:4004/admin

#Importante: Quando os dados não estiverem persistidos no DB (litesql) reiniciar o serviço na porta 

###
#create GET request in bookshop service document
GET {{baseUrl}}{{complementUrl}}

###
#create GET request in bookshop service document using complete path
GET {{completeUrl}}

###
#create GET request in bookshop service document with complete baseURL
GET {{baseUrlComplete}}{{complementUrl}}

###
#create GET request in bookshop service document with complete baseURL JSon Format
GET {{baseUrlComplete}}{{complementUrl}}?$format=json

###
#create GET request in bookshop metadata
GET {{baseUrl}}{{complementUrl}}$metadata

###
#create GET request in bookshop metadata in json format
GET {{baseUrl}}{{complementUrl}}$metadata?$format=json

###
#create GET request in bookshop metadata with complete baseURL
GET {{baseUrlComplete}}{{complementUrl}}$metadata

###
#create GET request in book service (query)
GET {{baseUrl}}{{complementUrl}}Books

###
#create GET request in book service (read)
GET {{baseUrl}}admin/Books
# HTTP/1.1 200 OK
# HTTP/1.1 404 Not Found

###
#create GET request in book service (read) with key
GET {{baseUrl}}admin/Books(622fe295-f41a-4c72-a837-e50886d25725)
# HTTP/1.1 200 OK
# HTTP/1.1 404 Not Found

###
#create GET request in book service (read) with locale (text)
GET {{baseUrl}}admin/Books?sap-locale=en

###
#create GET request in books entity in booksShop service with
GET {{baseUrl}}{{complementUrl}}Books
 Accept-Language: de

###
#create GET request in Authors entity in booksShop service with
GET {{baseUrl}}{{complementUrl}}Authors
 
###
#create GET request in Epochs entity in booksShop service with
GET {{baseUrl}}{{complementUrl}}Epochs

###
#create GET request in Epochs entity in booksShop service with
GET {{baseUrl}}{{complementUrl}}Authors(001199da-6131-4c4a-9ef4-7b5c295af6c2)

### 
#create POST request in author service
POST {{baseUrl}}{{complementUrl}}Authors
Content-Type: application/json

{    
    "name" : "Teste4",
    "gender" : "M",
    "epoch_ID" : 110,
    "dateOfBirth" : "2024-01-01",
    "dateOfDeath" : "2022-01-01" 
}

#Optimist DB Lock thought concurrent transactions
###create PUT request to update author
PUT  {{baseUrl}}{{complementUrl}}Authors(001199da-6131-4c4a-9ef4-7b5c295af6c2)
If-Match: W/"2024-10-06T23:13:47.158Z"
Content-type: application/json 

{
    "name" : "Updated name again"
}


###
#Create a new author
# @name CreateNewAuthor
POST {{baseUrl}}{{complementUrl}}Authors  
Content-Type: application/json

{    
    "name" : "TesteUpdateWithEtags1",
    "gender" : "M",
    "epoch_ID" : 110,
    "dateOfBirth" : "2024-01-01",
    "dateOfDeath" : "2022-01-01" 
}

###
@authorID = {{CreateNewAuthor.response.body.$.ID}}

###
#create GET request in Authors entity in booksShop service with
GET {{baseUrl}}{{complementUrl}}Authors({{authorID}})

###
#Get Etag from autor
@Etag1 = {{CreateNewAuthor.response.headers.Etag}}


#Optimist DB Lock thought concurrent transactions
###create PUT request to update author
PUT  {{baseUrl}}{{complementUrl}}Authors({{authorID}})
If-Match: {{Etag1}}
Content-type: application/json 

{
    "name" : "Updated name again Teste7"
}

###
#create GET request in Authors entity in booksShop service with
GET {{baseUrl}}{{complementUrl}}Authors({{authorID}})

###
#Get Etag from autor
@Etag2 = {{CreateNewAuthor.response.headers.Etag}}


#Optimist DB Lock thought concurrent transactions
###create PUT request to update author
PUT  {{baseUrl}}{{complementUrl}}Authors({{authorID}})
If-Match: {{Etag2}}
Content-type: application/json 

{
    "name" : "Updated name again Etag2"
}

###
#create a GET request in the Epochs entity set
GET {{baseUrl}}{{complementUrl}}Epochs 

###
#create a GET request in the Currency entity set
GET {{baseUrl}}{{complementUrl}}Currencies

###
#create a GET request in the Currency entity set
GET {{baseUrl}}{{complementUrl}}Countries

###
#create POST request in book service
POST {{baseUrl}}admin/Books
Content-Type: application/json

{    
    "title": "Book #13",
    "price_amount" : 14.00,
    "price_currency_code" : "BRL",
    "genre" : 2,
    "authors_ID" : "987cf222-6793-4532-81f2-160fd295bfc4",
    "commonField" : "common2",
    "stock" : 9
}

###
#create POST request in book service
POST {{baseUrl}}admin/Books
Content-Type: application/json

{    
    "title": "Book #08",
    "price_amount": 8.00 ,
    "price_Currency_code": "BRL",    
    "genre" : 2,
    "commonField" : "common2"
}
#HTTP/1.1 201 Created
#HTTP/1.1 400 Bad Request Quando a chave já existe ou quando uma propriedade obrigatório não é enviado
# {
#   "error": {
#     "message": "Value is required",
#     "target": "title",
#     "code": "400",
#     "@Common.numericSeverity": 4
#   }
# }

###
#create POST request in book service
POST {{baseUrl}}{{complementUrl}}Books
Content-Type: application/json

{
    
}
#HTTP/1.1 201 Created
#HTTP/1.1 400 Bad Request


# ____________________________ CatalogService
###
# get Catalog Service document
GET {{baseUrl}}cat

###
# get Catalog Service metadata
GET {{baseUrl}}cat/$metadata

###
# get Books entity data
GET {{baseUrl}}cat/Books

###
# get Books entity data
GET {{baseUrl}}cat/Books(9c272f99-6e47-4e5b-a806-7077ebdc6c5b)

###
# get Books entity data
GET {{baseUrl}}cat/Authors

###
# create an author
POST {{baseUrl}}{{complementUrl}}Authors  
Content-Type: application/json

{    
    "name" : "TesteUpdateWithEtNewAuthor1",
    "gender" : "M",
    "epoch_ID" : 110,
    "dateOfBirth" : "2024-01-01",
    "dateOfDeath" : "2025-01-01" 
}

###
@authorID = {{CreateNewAuthor.response.body.$.ID}}


###
GET {{baseUrl}}cat/Authors

###
#create POST request in book service
POST {{baseUrl}}cat/Books
Content-Type: application/json

{    
    "title": "Book #1",
    "authors_ID" : "37ee3694-bfec-4a59-95f5-15af2816dc49",
    "stock" : 210
}


###
# create an author
POST {{baseUrl}}cat/Authors  
Content-Type: application/json

{    
    "name" : "TesteUpdateWithEtNewAuthor1",
    "gender" : "M",
    "epoch_ID" : 110,
    "dateOfBirth" : "2024-01-01",
    "dateOfDeath" : "2025-01-01" 
}

###
@authorID2 = {{CreateNewAuthor.response.body.$.ID}}

###
GET {{baseUrl}}cat/Authors(fcddc57a-b0a0-4800-ac70-5e22fdb04002)


###
GET {{baseUrl}}cat/Books

###
# get Authors entity data
GET {{baseUrl}}cat/Authors({{authorID2}})

###
#create POST request in book service
POST {{baseUrl}}cat/Books
Content-Type: application/json

{    
    "title": "Avelino4",
    "stock" : 30,
    //"price_amount": 1.00 ,
    //"price_Currency_code": "BRL",    
    //"genre" : 1,
    "authors_ID" : "fcddc57a-b0a0-4800-ac70-5e22fdb04002"
    //"commonField" : "common2"
}

###
#create author to test function validateLifeDate
POST {{baseUrl}}{{complementUrl}}Authors

//Test action
# In the following requests the variable baseUrl is used.
# Its value is set here.
//@baseUrl = http://localhost:4004

### ------------------------------------------------------------------------
# Get Service Metadata Document
GET {{baseUrl}}cat/$metadata

###
GET {{baseUrl}}cat/Authors

### ------------------------------------------------------------------------
# Retrieve the ID of the book with the title 'Faust'
# Use this ID to call the submitOrder action
# @name getBookID
GET {{baseUrl}}cat/Books?$filter=title eq 'Avelino'

###
@bookID = {{getBookID.response.body.$.value[0].ID}}
POST {{baseUrl}}cat/submitOrder
Content-Type: application/json

{
  "book": "{{bookID}}",
  //"book" : "159beb78-fe2d-4f53-8238-7f0a255dfed5",
  "quantity": 2
}

###
POST {{baseUrl}}cat/submitOrder
Content-Type: application/json

{
  "book": "{{bookID}}",
  //"book" : "159beb78-fe2d-4f53-8238-7f0a255dfed5",
  "quantity": 0
}

#************************************** Test query
# In the following requests the variable baseUrl is used.
# Its value is set here.
@baseUrlNew = http://localhost:4004



### ------------------------------------------------------------------------
###
# Get Service Document
GET {{baseUrl}}cat

###
# Get Service Metadata Document
GET {{baseUrl}}cat/$metadata



### ------------------------------------------------------------------------
GET {{baseUrl}}cat/Authors


###
# Retrieve the ID of the book with the title 'Avelino4'
# Use this ID to call the submitOrder action
# @name getBookID
GET {{baseUrl}}cat/Books?$filter=title eq 'Avelino4'

###

@bookID = {{getBookID.response.body.$.value[0].ID}}

POST {{baseUrl}}cat/submitOrder
Accept-Language: pt
Content-Type: application/json

{
  "book": "{{bookID}}",
  "quantity": 22
}



### ------------------------------------------------------------------------
# Call the submitOrder action with a quantity of 0 -> error
POST {{baseUrl}}cat/submitOrder
Accept-Language: pt 
Content-Type: application/json

{
  "book": "{{bookID}}",
  "quantity": 0
}



### ------------------------------------------------------------------------
# Call the submitOrder action with a quantity that exceeds stock -> error
POST {{baseUrl}}cat/submitOrder
Accept-Language: pt 
Content-Type: application/json

{
  "book": "{{bookID}}",
  "quantity": 999999
}



### ------------------------------------------------------------------------
# Call the submitOrder action with an invalid book ID -> error
POST {{baseUrl}}cat/submitOrder
Accept-Language: pt
Content-Type: application/json

{
  "book": "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee",
  "quantity": 2
}

### ------------------------------------------------------------------------
# Create a new author using the admin service 
# with the date of death before the date of birth -> error
# Check the returned error message in German and in English (Accept-Language) 
POST {{baseUrl}}admin/Authors
Accept-Language: en   
Content-Type: application/json

{
  "name": "Friedrich Schiller",
  "dateOfBirth": "1759-11-10",
  "dateOfDeath": "1705-05-09", 
  "epoch": {"ID": 120}
}

###

POST {{baseUrl}}admin/Authors
Accept-Language: de 
Content-Type: application/json

{
  "name": "Friedrich Schiller",
  "dateOfBirth": "1759-11-10",
  "dateOfDeath": "1705-05-09", 
  "epoch": {"ID": 120}
}

###--------------------------------
#Authorization JWT
GET {{baseUrl}}Admin/Books
Authorization: Basic catuser:abcd1234

###--------------------------------
#Authorization JWT
GET {{baseUrl}}Admin/Authors
Authorization: Basic catuser:abcd12342

#***********************Access Control
# In the following requests the variable baseUrl is used.
# Its value is set here.
//@baseUrl = http://localhost:4004



############################################################################
############################################################################
## CATALOG SERVICE
############################################################################
############################################################################

### ------------------------------------------------------------------------
# Get all books - unauthenticated
GET {{baseUrl}}cat/Books


### ------------------------------------------------------------------------
# Get all authors - unauthenticated
GET {{baseUrl}}cat/Authors


### ------------------------------------------------------------------------
# Create a new author - unauthenticated
POST {{baseUrl}}cat/Authors
Content-Type: application/json

{
  "name": "Friedrich Schiller",
  "dateOfBirth": "1759-11-10",
  "dateOfDeath": "1805-05-09",
  "epoch": {"ID": 120}
}


### ------------------------------------------------------------------------
# Create a new book with author William Shakespeare - unauthenticated
# @name getShakespeare
GET {{baseUrl}}cat/Authors?$filter=name eq 'TesteUpdateWithEtNewAuthor1'

###
@authorID = {{getShakespeare.response.body.$.value[0].ID}}


###
POST {{baseUrl}}cat/Books
Content-Type: application/json

{
  "title": "Test Title",
  "author": { "ID": "{{authorID}}" }
}



### ------------------------------------------------------------------------
# Call the submitOrder action - unauthenticated and authenticated
# Retrieve the ID of the book with the title 'Faust'
# This ID is used to call the submitOrder action of the catalog service
# @name getBookID
GET {{baseUrl}}cat/Books?$filter=title eq 'Avelino4'

###
@bookID = {{getBookID.response.body.$.value[0].ID}}


### ------------------------------------------------------------------------
# Call the submitOrder action - unauthenticated
POST {{baseUrl}}cat/submitOrder
Content-Type: application/json

{
  "book": "{{bookID}}",
  "quantity": 2
}


### ------------------------------------------------------------------------
# Call the submitOrder action - authenticated
POST {{baseUrl}}cat/submitOrder
Authorization: Basic catuser:abcd1234
Content-Type: application/json

{
  "book": "{{bookID}}",
  "quantity": 2
}




############################################################################
############################################################################
## ADMIN SERVICE
############################################################################
############################################################################

### ------------------------------------------------------------------------
# Get all books - as catuser
GET {{baseUrl}}admin/Books
Authorization: Basic catuser:abcd1234


### ------------------------------------------------------------------------
# Get all books - as adminuser
GET {{baseUrl}}admin/Books
Authorization: Basic adminuser:abcd1234


### ------------------------------------------------------------------------
# Create a new author - as catuser
POST {{baseUrl}}admin/Authors
Authorization: Basic catuser:abcd1234
Content-Type: application/json

{
  "name": "Friedrich Schiller",
  "dateOfBirth": "1759-11-10",
  "dateOfDeath": "1805-05-09",
  "epoch": {"ID": 120}
}


### ------------------------------------------------------------------------
# Create a new author - as adminuser
POST {{baseUrl}}admin/Authors
Authorization: Basic adminuser:abcd1234
Content-Type: application/json

{
  "name": "Friedrich Schiller",
  "dateOfBirth": "1759-11-10",
  "dateOfDeath": "1805-05-09",
  "epoch": {"ID": 120}
}



### ------------------------------------------------------------------------
# Delete a book without stock and a book with stock
# Read the ID of a book without stock
# @name getBookWithoutStock
GET {{baseUrl}}admin/Books?$filter=stock eq 0&$top=1&$select=ID
Authorization: Basic adminuser:abcd1234

### Assign the received ID to the variable ID1
@ID1 = {{getBookWithoutStock.response.body.$.value[0].ID}}


### ------------------------------------------------------------------------
# Retrieve the ETag belonging to the read book
# @name getETag1
GET {{baseUrl}}admin/Books({{ID1}})
Authorization: Basic adminuser:abcd1234

### Assign the received ETag to the variable ETag1
@ETag1 = {{getETag1.response.headers.ETag}}


### ------------------------------------------------------------------------
# Delete the corresponding book using the ID and the ETag retrieved above
DELETE {{baseUrl}}admin/Books({{ID1}})
If-Match: {{ETag1}}
Authorization: Basic adminuser:abcd1234


### ------------------------------------------------------------------------
# Delete a book with stock 
# Read the ID of a book with stock
# @name getBookWithStock
GET {{baseUrl}}/admin/Books?$filter=stock gt 0&$top=1&$select=ID
Authorization: Basic adminuser:abcd1234

### Assign the received ID to the variable ID2
@ID2 = {{getBookWithStock.response.body.$.value[0].ID}}


### ------------------------------------------------------------------------
# Retrieve the ETag belonging to the read book
# @name getETag2
GET {{baseUrl}}/admin/Books({{ID2}})
Authorization: Basic adminuser:abcd1234

### Assign the received ETag to the variable ETag2
@ETag2 = {{getETag2.response.headers.ETag}}


### ------------------------------------------------------------------------
# Delete the corresponding book using the ID and the ETag retrieved above
DELETE {{baseUrl}}/admin/Books({{ID2}})
If-Match: {{ETag2}}
Authorization: Basic adminuser:abcd1234